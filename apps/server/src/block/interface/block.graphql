enum BlockObjectType {
  PAGE
  BLOCK
  DATABASE
}

enum HeadingType {
  H1
  H2
  H3
}

type Emoji {
  emoji: String!
}

type Image {
  image: String!
}

union EmojiImage = Emoji | Image

type RichText {
  rawText: String!
}

input RichTextInput {
  rawText: String!
}

type PageProperties {
  type: String!
  title: RichText!
  favourite: Boolean!
  image: EmojiImage
  coverImage: CoverImage
  childrenOrder: [String!]!
}

type DatabaseSchema_String {
  type: String!
  name: String!
}

type DatabaseSchema_Number {
  type: String!
  name: String!
}

union DatabaseSchema = DatabaseSchema_String | DatabaseSchema_Number

type DatabaseProperties {
  type: String!
  title: RichText!
  schema: [DatabaseSchema!]!
}

input PagePropertiesInput {
  title: RichTextInput!
}

type ParagraphProperties {
  type: String!
  text: RichText!
}

input ParagraphPropertiesInput {
  text: RichTextInput!
}

type HeadingProperties {
  type: String!
  text: RichText!
  variant: HeadingType!
}

input HeadingPropertiesInput {
  text: RichTextInput!
  variant: HeadingType!
}

type CoverImage {
  gradient: String
}

input CoverImageInput {
  gradient: String!
}

union ContentProperties = ParagraphProperties | HeadingProperties
union BlockProperties =
    DatabaseProperties
  | PageProperties
  | ParagraphProperties
  | HeadingProperties

interface Block {
  id: ID!
  object: BlockObjectType!
  createdBy: User!
  createdById: ID!
  parent: Block
  parentId: ID
}

type Database implements Block {
  id: ID!
  object: BlockObjectType!
  createdBy: User!
  createdById: ID!
  parent: Block
  parentId: ID

  properties: DatabaseProperties!
  children: [Page!]!
}

type Page implements Block {
  id: ID!
  object: BlockObjectType!
  createdBy: User!
  createdById: ID!
  parent: Block
  parentId: ID

  properties: PageProperties!
  children: [Block!]!
}

type ContentBlock implements Block {
  id: ID!
  object: BlockObjectType!
  createdBy: User!
  createdById: ID!
  parent: Block
  parentId: ID

  properties: ContentProperties!
}

input CreateBlockInput {
  object: BlockObjectType!
  parentId: ID
}

input BlockFilters {
  object: BlockObjectType
  parentId: ID
}

input CreatePageInput {
  id: ID
  properties: PagePropertiesInput!
  parentId: ID
  afterId: ID
}

input CreateParagraphBlockInput {
  id: ID
  properties: ParagraphPropertiesInput!
  parentId: ID
  afterId: ID
}

input CreateHeadingBlockInput {
  id: ID
  properties: HeadingPropertiesInput!
  parentId: ID
  afterId: ID
}

type Query {
  blocks(filters: BlockFilters): [Block!]!
  block(id: ID!): Block!

  page(id: ID!, populateSubTree: Boolean): Page!
  pages(filters: BlockFilters): [Page!]!

  path(id: ID!): [Page!]!
}

input UpdatePageInput {
  title: RichTextInput
  image: String
  emoji: String
  coverImage: CoverImageInput
  favourite: Boolean
}

input UpdateContentBlockInput {
  text: RichTextInput
}

# TODO make this a JSON maybe, as we cant UNION this :(
input DatabaseSchemaInput {
  type: String!
  name: String!
}

input DatabasePropertiesInput {
  title: RichTextInput!
  schema: [DatabaseSchemaInput!]
}

input CreateDatabaseInput {
  id: ID
  properties: DatabasePropertiesInput!
  parentId: ID
  afterId: ID
}

type Mutation {
  createPage(input: CreatePageInput!): Page!
  updatePage(id: ID!, input: UpdatePageInput!): Page!

  createParagraphBlock(input: CreateParagraphBlockInput!): ContentBlock!

  createHeadingBlock(input: CreateHeadingBlockInput!): ContentBlock!

  createDatabase(input: CreateDatabaseInput!): Database!

  updateContentBlock(id: ID!, input: UpdateContentBlockInput!): ContentBlock!
  updateBlockLocation(id: ID!, parentId: ID!, afterId: ID): Boolean!
  deleteBlock(id: ID!): Boolean!
}
