enum BlockType {
  PAGE
  TEXT
  HEADING_1
}

interface Block {
  id: ID!
  type: BlockType!
  createdBy: User!
  createdById: ID!
  parent: Block
  parentId: ID
  children: [Block!]
}

type TextBlock implements Block {
  id: ID!
  type: BlockType!
  createdBy: User!
  createdById: ID!
  parent: Block
  parentId: ID
  children: [Block!]

  text: String
}

type PageBlock implements Block {
  id: ID!
  type: BlockType!
  createdBy: User!
  createdById: ID!
  parent: Block
  parentId: ID
  children: [Block!]

  title: String!
  description: String
  emoji: String
  favourite: Boolean!
}

input CreateBlockInput {
  type: BlockType!
  parentId: ID
}

input BlockFilters {
  type: BlockType
  parentId: ID
}

type Query {
  blocks(filters: BlockFilters): [Block!]!
  block(id: ID!): Block!
  path(blockId: ID!): [Block!]!
}

input UpdateBlockInput {
  text: String
  title: String
  favourite: Boolean
}

type Mutation {
  createBlock(input: CreateBlockInput!): Block!
  updateBlock(id: ID!, input: UpdateBlockInput!): Block!
}
