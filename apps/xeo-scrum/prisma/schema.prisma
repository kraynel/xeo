generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("XEO_SCRUM_DB_URL")
  shadowDatabaseUrl    = env("XEO_SCRUM_SHADOW_DB_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  backlogs      Backlog[]
  sprints       Sprint[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([identifier, token])
}

enum BacklogStatus {
  DONE
  IN_PROGRESS
  SPRINT_BACKLOG
  UNKNOWN
}

enum NotionColumnType {
  SELECT
  MULTI_SELECT
}

model Backlog {
  id                String             @id @default(cuid())
  user              User               @relation(fields: [userId], references: [id])
  userId            String
  // Notion Related Fields
  databaseId        String
  databaseName      String
  pointsColumnName  String
  statusColumnName  String
  sprintColumnName  String
  notionColumnType  NotionColumnType   @default(SELECT)
  notionStatusLinks NotionStatusLink[]
  sprints           Sprint[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
}

model NotionStatusLink {
  id                  String                @id @default(cuid())
  backlog             Backlog               @relation(fields: [backlogId], references: [id])
  backlogId           String
  notionStatusName    String
  notionStatusColor   String
  status              BacklogStatus
  SprintStatusHistory SprintStatusHistory[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
}

model Sprint {
  id                          String          @id @default(cuid())
  name                        String
  startDate                   DateTime
  endDate                     DateTime
  notionSprintValue           String // ID of the Notion Sprint (select ID)
  user                        User            @relation(fields: [userId], references: [id])
  userId                      String
  backlog                     Backlog         @relation(fields: [backlogId], references: [id])
  backlogId                   String
  sprintHistory               SprintHistory[]
  sprintGoal                  String
  sprintDevelopersAndCapacity Json // temporarily a JSON, eventually a join table from User to Capacity
  teamSpeed                   Float
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @default(now()) @updatedAt
}

model SprintHistory {
  id                  String                @id @default(cuid())
  sprint              Sprint                @relation(fields: [sprintId], references: [id])
  sprintId            String
  timestamp           DateTime
  sprintStatusHistory SprintStatusHistory[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
}

model SprintStatusHistory {
  id                 String            @id @default(cuid())
  notionStatusLink   NotionStatusLink? @relation(fields: [notionStatusLinkId], references: [id])
  notionStatusLinkId String?
  sprintHistory      SprintHistory     @relation(fields: [sprintHistoryId], references: [id])
  sprintHistoryId    String
  pointsInStatus     Float
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
}
