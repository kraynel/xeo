generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("XEO_SCRUM_DB_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  backlogs      Backlog[]
  sprints       Sprint[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum BacklogStatus {
  DONE
  TO_VALIDATE
  IN_PROGRESS
  SPRINT_BACKLOG
  UNKNOWN
}

model Backlog {
  id                String             @id @default(cuid())
  user              User               @relation(fields: [userId], references: [id])
  userId            String
  // Notion Related Fields
  databaseId        String
  databaseName      String
  pointsColumnName  String
  statusColumnName  String
  sprintColumnName  String
  notionStatusLinks NotionStatusLink[]
  sprints           Sprint[]
}

model NotionStatusLink {
  id             String        @id @default(cuid())
  backlog        Backlog       @relation(fields: [backlogId], references: [id])
  backlogId      String
  notionStatusId String
  status         BacklogStatus
}

model Sprint {
  id                String   @id @default(cuid())
  name              String
  startDate         DateTime
  endDate           DateTime
  notionSprintValue String // ID of the Notion Sprint (select ID)
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  backlog           Backlog  @relation(fields: [backlogId], references: [id])
  backlogId         String
}
