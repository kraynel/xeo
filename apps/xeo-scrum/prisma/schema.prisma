generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("PLANETSCALE_DB_URL")
  shadowDatabaseUrl    = env("PLANETSCALE_SHADOW_DB_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  NotionBacklog NotionBacklog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum BacklogStatus {
  DONE
  TO_VALIDATE
  IN_PROGRESS
  SPRINT_BACKLOG
}

model NotionBacklog {
  id                String             @id @default(cuid())
  user              User               @relation(fields: [userId], references: [id])
  userId            String
  // Notion Related Fields
  databaseId        String
  databaseName      String
  pointsColumnId    String
  statusColumnId    String
  sprintColumnId    String
  notionStatusLinks NotionStatusLink[]
}

model NotionStatusLink {
  id              String        @id @default(cuid())
  notionBacklog   NotionBacklog @relation(fields: [notionBacklogId], references: [id])
  notionBacklogId String
  notionStatusId  String
  status          BacklogStatus
}
