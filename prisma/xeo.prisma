generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("PLANETSCALE_PRISMA_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  //
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  //
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  teamsMemberOf TeamMember[]
  // User Onboarding Info
  metadata      UserMetadata?
  //
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
}

enum UserRole {
  DEVELOPER
  TECH_LEAD
  PROJECT_MANAGER
}

model UserMetadata {
  id            String   @id @default(cuid())
  role          UserRole
  preferredName String
  user          User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId        String   @unique
  defaultTeam   Team?    @relation(fields: [defaultTeamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  defaultTeamId String?
  //
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  @@index([userId])
  @@index([defaultTeamId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  //
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([identifier, token])
}

model Sprint {
  id                          String           @id @default(cuid())
  name                        String
  startDate                   DateTime
  endDate                     DateTime
  notionSprintValue           String // ID of the Notion Sprint (select ID)
  dailyStartTime              String           @default("09:00") // HH:mm 
  team                        Team             @relation(fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teamId                      String
  sprintHistory               SprintHistory[]
  sprintGoal                  String
  sprintDevelopersAndCapacity Json
  teamSpeed                   Float
  //
  lastSynchronisedAt          DateTime         @default(now())
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @default(now()) @updatedAt
  // Relations
  dependencyGraph             DependencyGraph?

  @@index([teamId])
}

model SprintHistory {
  id                  String                @id @default(cuid())
  sprint              Sprint                @relation(fields: [sprintId], references: [id], onDelete: NoAction)
  sprintId            String
  timestamp           DateTime
  sprintStatusHistory SprintStatusHistory[]
  //
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt

  @@index([sprintId])
}

model SprintStatusHistory {
  id                 String            @id @default(cuid())
  notionStatusLink   NotionStatusLink? @relation(fields: [notionStatusLinkId], references: [id])
  notionStatusLinkId String?
  sprintHistory      SprintHistory     @relation(fields: [sprintHistoryId], references: [id], onDelete: NoAction)
  sprintHistoryId    String
  pointsInStatus     Float
  //
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt

  @@index([sprintHistoryId])
  @@index([notionStatusLinkId])
}

model DependencyGraph {
  id              String       @id @default(cuid())
  sprintId        String?      @unique
  sprint          Sprint?      @relation(fields: [sprintId], references: [id], onDelete: NoAction)
  ticketPositions Json
  notionEpic      NotionEpic[]
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

model TeamMember {
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teamId    String
  role      TeamRole @default(MEMBER)
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

enum NotionColumnType {
  SELECT
  MULTI_SELECT
  RELATIONSHIP_ID
}

model Team {
  id                     String            @id @default(cuid())
  name                   String
  shortName              String
  companyName            String
  // Relations
  members                TeamMember[]
  sprints                Sprint[]
  usersWithTeamAsDefault UserMetadata[]
  notionConnection       NotionConnection?
  notionDatabase         NotionDatabase?
  //
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @default(now()) @updatedAt
}

model NotionConnection {
  id                  String          @id @default(cuid())
  team                Team            @relation(fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teamId              String          @unique
  // Notion Connection
  accessToken         String
  notionWorkspaceId   String
  notionWorkspaceIcon String
  notionWorkspaceName String
  notionBotId         String
  // Database
  notionDatabase      NotionDatabase?
  //
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now()) @updatedAt

  @@index([teamId])
}

model NotionDatabase {
  id                       String             @id @default(cuid())
  databaseId               String
  databaseName             String
  pointsColumnName         String
  statusColumnName         String
  sprintColumnName         String
  parentRelationColumnName String?
  epicRelationColumnId     String?
  notionColumnType         NotionColumnType
  notionStatusLinks        NotionStatusLink[]
  notionEpics              NotionEpic[]
  // Relations
  notionConnection         NotionConnection   @relation(fields: [notionConnectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  notionConnectionId       String             @unique
  team                     Team               @relation(fields: [teamId], references: [id], onDelete: NoAction)
  teamId                   String             @unique
  //
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @default(now()) @updatedAt

  @@index([notionConnectionId])
  @@index([teamId])
}

model NotionEpic {
  id                String           @id @default(cuid())
  notionEpicIcon    String?
  notionEpicName    String
  notionEpicId      String
  notionDatabase    NotionDatabase   @relation(fields: [notionDatabaseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  notionDatabaseId  String
  active            Boolean          @default(true)
  // Relations
  dependencyGraph   DependencyGraph? @relation(fields: [dependencyGraphId], references: [id])
  dependencyGraphId String?
  //
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt

  @@index([notionDatabaseId])
}

enum BacklogStatus {
  DONE
  IN_PROGRESS
  TO_VALIDATE
  SPRINT_BACKLOG
  UNKNOWN
}

model NotionStatusLink {
  id                  String                @id @default(cuid())
  notionDatabaseId    String
  notionDatabase      NotionDatabase        @relation(fields: [notionDatabaseId], references: [id], onDelete: NoAction)
  notionStatusName    String
  notionStatusId      String                @default("")
  notionStatusColor   String
  status              BacklogStatus
  SprintStatusHistory SprintStatusHistory[]
  //
  deletedAt           DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt

  @@index([notionDatabaseId])
}
