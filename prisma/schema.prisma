generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Page {
  id            String     @id @default(uuid())
  blocks        Block[]
  emoji         String?
  coverGradient String?
  richText      Json
  rawText       String     @default("")
  fields        Json
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  softDeletedAt DateTime?
  createdBy     User       @relation("pageCreatedBy", fields: [createdById], references: [id])
  createdById   String
  updatedBy     User       @relation("pageUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String
  backLinks     PageLink[] @relation("linkFrom")
  links         PageLink[] @relation("linkTo")
  Database      Database?  @relation(fields: [databaseId], references: [id])
  databaseId    String?
  favourite     Boolean    @default(false)
}

model Database {
  id            String    @id @default(uuid())
  schema        Json
  pages         Page[]
  emoji         String
  richText      Json
  rawText       String    @default("")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  softDeletedAt DateTime?
  createdBy     User      @relation(fields: [createdById], references: [id])
  createdById   String
}

model PageLink {
  linkFrom    Page     @relation("linkFrom", fields: [linkFromId], references: [id])
  linkFromId  String
  linkTo      Page     @relation("linkTo", fields: [linkToId], references: [id])
  linkToId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@id([linkFromId, linkToId])
}

model Block {
  id            String          @id @default(uuid())
  type          block_type_enum
  richText      Json
  rawText       String          @default("")
  variant       variant_enum    @default(PARAGRAPH)
  rank          Int
  parentPage    Page            @relation(fields: [parentPageId], references: [id])
  parentPageId  String
  parentBlock   Block?          @relation("BlockToBlock", fields: [parentBlockId], references: [id])
  parentBlockId String?
  children      Block[]         @relation("BlockToBlock")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  softDeletedAt DateTime?
  createdBy     User            @relation("blockCreatedBy", fields: [createdById], references: [id])
  createdById   String
  updatedBy     User            @relation("blockUpdatedBy", fields: [updatedById], references: [id])
  updatedById   String


  @@unique([parentPageId, rank])
  @@unique([parentBlockId, rank])
}

model User {
  id            String     @id @default(uuid())
  firstName     String
  lastName      String
  username      String     @unique
  passwordHash  String
  avatar        String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  softDeletedAt DateTime?
  databases     Database[]
  links         PageLink[]
  createdPages  Page[]     @relation("pageCreatedBy")
  updatedPages  Page[]     @relation("pageUpdatedBy")
  createdBlocks Block[]    @relation("blockCreatedBy")
  updatedBlocks Block[]    @relation("blockUpdatedBy")
}

enum block_type_enum {
  TEXT
  PAGE_LINK
  LIST
  LIST_ITEM
}

enum variant_enum {
  PARAGRAPH
  HEADING_1
  HEADING_2
  HEADING_3
}
